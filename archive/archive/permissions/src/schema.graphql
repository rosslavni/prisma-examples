# import Role, Post from "./generated/prisma.graphql"

type Query {
  # Authenticated users can information retrieve about themselves
  me: User

  # All authenticated users can retrieve a list of posts
  posts: [Post!]!

  # Only admins can retrieve info about given users
  user(id: ID!): User
}

type Mutation {
  # Everyone can signup
  signup(email: String!, password: String!, admin: Boolean): AuthPayload!

  # Everyone can login
  login(email: String!, password: String!): AuthPayload!

  # Users can only update their own passwords
  # if `userId` is set, the user trying to update the password needs to be an admin
  updatePassword(oldPassword: String, newPassword: String!, userId: ID): User!

  # All authenticated users can create posts
  createPost(title: String!): Post!

  # Only the author of a post or an admins can update it
  updateTitle(id: ID!, newTitle: String!): Post

  # Only the author of a post or an admin can delete it
  deletePost(id: ID!): Post
}

type AuthPayload {
  token: String!
  user: User!
}

# The `User` type is a reduced version ("mask") of the `User` 
# type from the data model (and database schema).
# It does not expose the `password` and `role` fields.
type User {
  id: ID!
  createdAt: DateTime!
  role: Role!
  email: String!
  posts: [Post!]!
}
