// Code generated by Prisma CLI (https://github.com/prisma/prisma). DO NOT EDIT.

package prisma

import (
	"context"
	"errors"

	"github.com/prisma/prisma-client-lib-go"

	"github.com/machinebox/graphql"
)

var ErrNoResult = errors.New("query returned no result")

func Str(v string) *string { return &v }
func Int32(v int32) *int32 { return &v }
func Bool(v bool) *bool    { return &v }

type BatchPayloadExec struct {
	exec *prisma.BatchPayloadExec
}

func (exec *BatchPayloadExec) Exec(ctx context.Context) (BatchPayload, error) {
	bp, err := exec.exec.Exec(ctx)
	return BatchPayload(bp), err
}

type BatchPayload struct {
	Count int64 `json:"count"`
}

type Aggregate struct {
	Count int64 `json:"count"`
}

type Client struct {
	Client *prisma.Client
}

type Options struct {
	Endpoint string
	Secret   string
}

func New(options *Options, opts ...graphql.ClientOption) *Client {
	endpoint := DefaultEndpoint
	secret := Secret
	if options != nil {
		endpoint = options.Endpoint
		secret = options.Secret
	}
	return &Client{
		Client: prisma.New(endpoint, secret, opts...),
	}
}

func (client *Client) GraphQL(ctx context.Context, query string, variables map[string]interface{}) (map[string]interface{}, error) {
	return client.Client.GraphQL(ctx, query, variables)
}

var DefaultEndpoint = "http://localhost:4466"
var Secret = ""

func (client *Client) Comment(params CommentWhereUniqueInput) *CommentExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"CommentWhereUniqueInput!", "Comment"},
		"comment",
		[]string{"id", "text"})

	return &CommentExec{ret}
}

type CommentsParams struct {
	Where   *CommentWhereInput   `json:"where,omitempty"`
	OrderBy *CommentOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32               `json:"skip,omitempty"`
	After   *string              `json:"after,omitempty"`
	Before  *string              `json:"before,omitempty"`
	First   *int32               `json:"first,omitempty"`
	Last    *int32               `json:"last,omitempty"`
}

func (client *Client) Comments(params *CommentsParams) *CommentExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"CommentWhereInput", "CommentOrderByInput", "Comment"},
		"comments",
		[]string{"id", "text"})

	return &CommentExecArray{ret}
}

type CommentsConnectionParams struct {
	Where   *CommentWhereInput   `json:"where,omitempty"`
	OrderBy *CommentOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32               `json:"skip,omitempty"`
	After   *string              `json:"after,omitempty"`
	Before  *string              `json:"before,omitempty"`
	First   *int32               `json:"first,omitempty"`
	Last    *int32               `json:"last,omitempty"`
}

func (client *Client) CommentsConnection(params *CommentsConnectionParams) CommentConnectionExec {
	panic("not implemented")
}

func (client *Client) Post(params PostWhereUniqueInput) *PostExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"PostWhereUniqueInput!", "Post"},
		"post",
		[]string{"id", "createdAt", "updatedAt", "title", "content", "published"})

	return &PostExec{ret}
}

type PostsParams struct {
	Where   *PostWhereInput   `json:"where,omitempty"`
	OrderBy *PostOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) Posts(params *PostsParams) *PostExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"PostWhereInput", "PostOrderByInput", "Post"},
		"posts",
		[]string{"id", "createdAt", "updatedAt", "title", "content", "published"})

	return &PostExecArray{ret}
}

type PostsConnectionParams struct {
	Where   *PostWhereInput   `json:"where,omitempty"`
	OrderBy *PostOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) PostsConnection(params *PostsConnectionParams) PostConnectionExec {
	panic("not implemented")
}

func (client *Client) User(params UserWhereUniqueInput) *UserExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"UserWhereUniqueInput!", "User"},
		"user",
		[]string{"id", "email", "name"})

	return &UserExec{ret}
}

type UsersParams struct {
	Where   *UserWhereInput   `json:"where,omitempty"`
	OrderBy *UserOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) Users(params *UsersParams) *UserExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"UserWhereInput", "UserOrderByInput", "User"},
		"users",
		[]string{"id", "email", "name"})

	return &UserExecArray{ret}
}

type UsersConnectionParams struct {
	Where   *UserWhereInput   `json:"where,omitempty"`
	OrderBy *UserOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32            `json:"skip,omitempty"`
	After   *string           `json:"after,omitempty"`
	Before  *string           `json:"before,omitempty"`
	First   *int32            `json:"first,omitempty"`
	Last    *int32            `json:"last,omitempty"`
}

func (client *Client) UsersConnection(params *UsersConnectionParams) UserConnectionExec {
	panic("not implemented")
}

func (client *Client) CreateComment(params CommentCreateInput) *CommentExec {
	ret := client.Client.Create(
		params,
		[2]string{"CommentCreateInput!", "Comment"},
		"createComment",
		[]string{"id", "text"})

	return &CommentExec{ret}
}

type CommentUpdateParams struct {
	Data  CommentUpdateInput      `json:"data"`
	Where CommentWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateComment(params CommentUpdateParams) *CommentExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"CommentUpdateInput!", "CommentWhereUniqueInput!", "Comment"},
		"updateComment",
		[]string{"id", "text"})

	return &CommentExec{ret}
}

type CommentUpdateManyParams struct {
	Data  CommentUpdateManyMutationInput `json:"data"`
	Where *CommentWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyComments(params CommentUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"CommentUpdateManyMutationInput!", "CommentWhereInput"},
		"updateManyComments")
	return &BatchPayloadExec{exec}
}

type CommentUpsertParams struct {
	Where  CommentWhereUniqueInput `json:"where"`
	Create CommentCreateInput      `json:"create"`
	Update CommentUpdateInput      `json:"update"`
}

func (client *Client) UpsertComment(params CommentUpsertParams) *CommentExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"CommentWhereUniqueInput!", "CommentCreateInput!", "CommentUpdateInput!", "Comment"},
		"upsertComment",
		[]string{"id", "text"})

	return &CommentExec{ret}
}

func (client *Client) DeleteComment(params CommentWhereUniqueInput) *CommentExec {
	ret := client.Client.Delete(
		params,
		[2]string{"CommentWhereUniqueInput!", "Comment"},
		"deleteComment",
		[]string{"id", "text"})

	return &CommentExec{ret}
}

func (client *Client) DeleteManyComments(params *CommentWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "CommentWhereInput", "deleteManyComments")
	return &BatchPayloadExec{exec}
}

func (client *Client) CreatePost(params PostCreateInput) *PostExec {
	ret := client.Client.Create(
		params,
		[2]string{"PostCreateInput!", "Post"},
		"createPost",
		[]string{"id", "createdAt", "updatedAt", "title", "content", "published"})

	return &PostExec{ret}
}

type PostUpdateParams struct {
	Data  PostUpdateInput      `json:"data"`
	Where PostWhereUniqueInput `json:"where"`
}

func (client *Client) UpdatePost(params PostUpdateParams) *PostExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"PostUpdateInput!", "PostWhereUniqueInput!", "Post"},
		"updatePost",
		[]string{"id", "createdAt", "updatedAt", "title", "content", "published"})

	return &PostExec{ret}
}

type PostUpdateManyParams struct {
	Data  PostUpdateManyMutationInput `json:"data"`
	Where *PostWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyPosts(params PostUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"PostUpdateManyMutationInput!", "PostWhereInput"},
		"updateManyPosts")
	return &BatchPayloadExec{exec}
}

type PostUpsertParams struct {
	Where  PostWhereUniqueInput `json:"where"`
	Create PostCreateInput      `json:"create"`
	Update PostUpdateInput      `json:"update"`
}

func (client *Client) UpsertPost(params PostUpsertParams) *PostExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"PostWhereUniqueInput!", "PostCreateInput!", "PostUpdateInput!", "Post"},
		"upsertPost",
		[]string{"id", "createdAt", "updatedAt", "title", "content", "published"})

	return &PostExec{ret}
}

func (client *Client) DeletePost(params PostWhereUniqueInput) *PostExec {
	ret := client.Client.Delete(
		params,
		[2]string{"PostWhereUniqueInput!", "Post"},
		"deletePost",
		[]string{"id", "createdAt", "updatedAt", "title", "content", "published"})

	return &PostExec{ret}
}

func (client *Client) DeleteManyPosts(params *PostWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "PostWhereInput", "deleteManyPosts")
	return &BatchPayloadExec{exec}
}

func (client *Client) CreateUser(params UserCreateInput) *UserExec {
	ret := client.Client.Create(
		params,
		[2]string{"UserCreateInput!", "User"},
		"createUser",
		[]string{"id", "email", "name"})

	return &UserExec{ret}
}

type UserUpdateParams struct {
	Data  UserUpdateInput      `json:"data"`
	Where UserWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateUser(params UserUpdateParams) *UserExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"UserUpdateInput!", "UserWhereUniqueInput!", "User"},
		"updateUser",
		[]string{"id", "email", "name"})

	return &UserExec{ret}
}

type UserUpdateManyParams struct {
	Data  UserUpdateManyMutationInput `json:"data"`
	Where *UserWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyUsers(params UserUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"UserUpdateManyMutationInput!", "UserWhereInput"},
		"updateManyUsers")
	return &BatchPayloadExec{exec}
}

type UserUpsertParams struct {
	Where  UserWhereUniqueInput `json:"where"`
	Create UserCreateInput      `json:"create"`
	Update UserUpdateInput      `json:"update"`
}

func (client *Client) UpsertUser(params UserUpsertParams) *UserExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"UserWhereUniqueInput!", "UserCreateInput!", "UserUpdateInput!", "User"},
		"upsertUser",
		[]string{"id", "email", "name"})

	return &UserExec{ret}
}

func (client *Client) DeleteUser(params UserWhereUniqueInput) *UserExec {
	ret := client.Client.Delete(
		params,
		[2]string{"UserWhereUniqueInput!", "User"},
		"deleteUser",
		[]string{"id", "email", "name"})

	return &UserExec{ret}
}

func (client *Client) DeleteManyUsers(params *UserWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "UserWhereInput", "deleteManyUsers")
	return &BatchPayloadExec{exec}
}

type PostOrderByInput string

const (
	PostOrderByInputIDAsc         PostOrderByInput = "id_ASC"
	PostOrderByInputIDDesc        PostOrderByInput = "id_DESC"
	PostOrderByInputCreatedAtAsc  PostOrderByInput = "createdAt_ASC"
	PostOrderByInputCreatedAtDesc PostOrderByInput = "createdAt_DESC"
	PostOrderByInputUpdatedAtAsc  PostOrderByInput = "updatedAt_ASC"
	PostOrderByInputUpdatedAtDesc PostOrderByInput = "updatedAt_DESC"
	PostOrderByInputTitleAsc      PostOrderByInput = "title_ASC"
	PostOrderByInputTitleDesc     PostOrderByInput = "title_DESC"
	PostOrderByInputContentAsc    PostOrderByInput = "content_ASC"
	PostOrderByInputContentDesc   PostOrderByInput = "content_DESC"
	PostOrderByInputPublishedAsc  PostOrderByInput = "published_ASC"
	PostOrderByInputPublishedDesc PostOrderByInput = "published_DESC"
)

type CommentOrderByInput string

const (
	CommentOrderByInputIDAsc         CommentOrderByInput = "id_ASC"
	CommentOrderByInputIDDesc        CommentOrderByInput = "id_DESC"
	CommentOrderByInputTextAsc       CommentOrderByInput = "text_ASC"
	CommentOrderByInputTextDesc      CommentOrderByInput = "text_DESC"
	CommentOrderByInputCreatedAtAsc  CommentOrderByInput = "createdAt_ASC"
	CommentOrderByInputCreatedAtDesc CommentOrderByInput = "createdAt_DESC"
	CommentOrderByInputUpdatedAtAsc  CommentOrderByInput = "updatedAt_ASC"
	CommentOrderByInputUpdatedAtDesc CommentOrderByInput = "updatedAt_DESC"
)

type UserOrderByInput string

const (
	UserOrderByInputIDAsc         UserOrderByInput = "id_ASC"
	UserOrderByInputIDDesc        UserOrderByInput = "id_DESC"
	UserOrderByInputEmailAsc      UserOrderByInput = "email_ASC"
	UserOrderByInputEmailDesc     UserOrderByInput = "email_DESC"
	UserOrderByInputNameAsc       UserOrderByInput = "name_ASC"
	UserOrderByInputNameDesc      UserOrderByInput = "name_DESC"
	UserOrderByInputCreatedAtAsc  UserOrderByInput = "createdAt_ASC"
	UserOrderByInputCreatedAtDesc UserOrderByInput = "createdAt_DESC"
	UserOrderByInputUpdatedAtAsc  UserOrderByInput = "updatedAt_ASC"
	UserOrderByInputUpdatedAtDesc UserOrderByInput = "updatedAt_DESC"
)

type MutationType string

const (
	MutationTypeCreated MutationType = "CREATED"
	MutationTypeUpdated MutationType = "UPDATED"
	MutationTypeDeleted MutationType = "DELETED"
)

type CommentUpdateWithWhereUniqueNestedInput struct {
	Where CommentWhereUniqueInput `json:"where"`
	Data  CommentUpdateDataInput  `json:"data"`
}

type CommentWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type PostCreateWithoutAuthorInput struct {
	Title     string                  `json:"title"`
	Content   *string                 `json:"content,omitempty"`
	Published *bool                   `json:"published,omitempty"`
	Comments  *CommentCreateManyInput `json:"comments,omitempty"`
}

type UserCreateOneWithoutPostsInput struct {
	Create  *UserCreateWithoutPostsInput `json:"create,omitempty"`
	Connect *UserWhereUniqueInput        `json:"connect,omitempty"`
}

type CommentCreateManyInput struct {
	Create  []CommentCreateInput      `json:"create,omitempty"`
	Connect []CommentWhereUniqueInput `json:"connect,omitempty"`
}

type CommentScalarWhereInput struct {
	ID                *string                   `json:"id,omitempty"`
	IDNot             *string                   `json:"id_not,omitempty"`
	IDIn              []string                  `json:"id_in,omitempty"`
	IDNotIn           []string                  `json:"id_not_in,omitempty"`
	IDLt              *string                   `json:"id_lt,omitempty"`
	IDLte             *string                   `json:"id_lte,omitempty"`
	IDGt              *string                   `json:"id_gt,omitempty"`
	IDGte             *string                   `json:"id_gte,omitempty"`
	IDContains        *string                   `json:"id_contains,omitempty"`
	IDNotContains     *string                   `json:"id_not_contains,omitempty"`
	IDStartsWith      *string                   `json:"id_starts_with,omitempty"`
	IDNotStartsWith   *string                   `json:"id_not_starts_with,omitempty"`
	IDEndsWith        *string                   `json:"id_ends_with,omitempty"`
	IDNotEndsWith     *string                   `json:"id_not_ends_with,omitempty"`
	Text              *string                   `json:"text,omitempty"`
	TextNot           *string                   `json:"text_not,omitempty"`
	TextIn            []string                  `json:"text_in,omitempty"`
	TextNotIn         []string                  `json:"text_not_in,omitempty"`
	TextLt            *string                   `json:"text_lt,omitempty"`
	TextLte           *string                   `json:"text_lte,omitempty"`
	TextGt            *string                   `json:"text_gt,omitempty"`
	TextGte           *string                   `json:"text_gte,omitempty"`
	TextContains      *string                   `json:"text_contains,omitempty"`
	TextNotContains   *string                   `json:"text_not_contains,omitempty"`
	TextStartsWith    *string                   `json:"text_starts_with,omitempty"`
	TextNotStartsWith *string                   `json:"text_not_starts_with,omitempty"`
	TextEndsWith      *string                   `json:"text_ends_with,omitempty"`
	TextNotEndsWith   *string                   `json:"text_not_ends_with,omitempty"`
	And               []CommentScalarWhereInput `json:"AND,omitempty"`
	Or                []CommentScalarWhereInput `json:"OR,omitempty"`
	Not               []CommentScalarWhereInput `json:"NOT,omitempty"`
}

type CommentUpdateInput struct {
	Text      *string                                    `json:"text,omitempty"`
	WrittenBy *UserUpdateOneRequiredWithoutCommentsInput `json:"writtenBy,omitempty"`
}

type CommentWhereInput struct {
	ID                *string             `json:"id,omitempty"`
	IDNot             *string             `json:"id_not,omitempty"`
	IDIn              []string            `json:"id_in,omitempty"`
	IDNotIn           []string            `json:"id_not_in,omitempty"`
	IDLt              *string             `json:"id_lt,omitempty"`
	IDLte             *string             `json:"id_lte,omitempty"`
	IDGt              *string             `json:"id_gt,omitempty"`
	IDGte             *string             `json:"id_gte,omitempty"`
	IDContains        *string             `json:"id_contains,omitempty"`
	IDNotContains     *string             `json:"id_not_contains,omitempty"`
	IDStartsWith      *string             `json:"id_starts_with,omitempty"`
	IDNotStartsWith   *string             `json:"id_not_starts_with,omitempty"`
	IDEndsWith        *string             `json:"id_ends_with,omitempty"`
	IDNotEndsWith     *string             `json:"id_not_ends_with,omitempty"`
	Text              *string             `json:"text,omitempty"`
	TextNot           *string             `json:"text_not,omitempty"`
	TextIn            []string            `json:"text_in,omitempty"`
	TextNotIn         []string            `json:"text_not_in,omitempty"`
	TextLt            *string             `json:"text_lt,omitempty"`
	TextLte           *string             `json:"text_lte,omitempty"`
	TextGt            *string             `json:"text_gt,omitempty"`
	TextGte           *string             `json:"text_gte,omitempty"`
	TextContains      *string             `json:"text_contains,omitempty"`
	TextNotContains   *string             `json:"text_not_contains,omitempty"`
	TextStartsWith    *string             `json:"text_starts_with,omitempty"`
	TextNotStartsWith *string             `json:"text_not_starts_with,omitempty"`
	TextEndsWith      *string             `json:"text_ends_with,omitempty"`
	TextNotEndsWith   *string             `json:"text_not_ends_with,omitempty"`
	WrittenBy         *UserWhereInput     `json:"writtenBy,omitempty"`
	And               []CommentWhereInput `json:"AND,omitempty"`
	Or                []CommentWhereInput `json:"OR,omitempty"`
	Not               []CommentWhereInput `json:"NOT,omitempty"`
}

type UserUpdateOneRequiredWithoutCommentsInput struct {
	Create  *UserCreateWithoutCommentsInput     `json:"create,omitempty"`
	Update  *UserUpdateWithoutCommentsDataInput `json:"update,omitempty"`
	Upsert  *UserUpsertWithoutCommentsInput     `json:"upsert,omitempty"`
	Connect *UserWhereUniqueInput               `json:"connect,omitempty"`
}

type UserSubscriptionWhereInput struct {
	MutationIn                 []MutationType               `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                      `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                     `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                     `json:"updatedFields_contains_some,omitempty"`
	Node                       *UserWhereInput              `json:"node,omitempty"`
	And                        []UserSubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []UserSubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []UserSubscriptionWhereInput `json:"NOT,omitempty"`
}

type UserUpdateWithoutCommentsDataInput struct {
	Email *string                           `json:"email,omitempty"`
	Name  *string                           `json:"name,omitempty"`
	Posts *PostUpdateManyWithoutAuthorInput `json:"posts,omitempty"`
}

type CommentSubscriptionWhereInput struct {
	MutationIn                 []MutationType                  `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                         `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                        `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                        `json:"updatedFields_contains_some,omitempty"`
	Node                       *CommentWhereInput              `json:"node,omitempty"`
	And                        []CommentSubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []CommentSubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []CommentSubscriptionWhereInput `json:"NOT,omitempty"`
}

type PostUpdateManyWithoutAuthorInput struct {
	Create     []PostCreateWithoutAuthorInput                `json:"create,omitempty"`
	Delete     []PostWhereUniqueInput                        `json:"delete,omitempty"`
	Connect    []PostWhereUniqueInput                        `json:"connect,omitempty"`
	Disconnect []PostWhereUniqueInput                        `json:"disconnect,omitempty"`
	Update     []PostUpdateWithWhereUniqueWithoutAuthorInput `json:"update,omitempty"`
	Upsert     []PostUpsertWithWhereUniqueWithoutAuthorInput `json:"upsert,omitempty"`
	DeleteMany []PostScalarWhereInput                        `json:"deleteMany,omitempty"`
	UpdateMany []PostUpdateManyWithWhereNestedInput          `json:"updateMany,omitempty"`
}

type UserUpdateInput struct {
	Email    *string                                 `json:"email,omitempty"`
	Name     *string                                 `json:"name,omitempty"`
	Posts    *PostUpdateManyWithoutAuthorInput       `json:"posts,omitempty"`
	Comments *CommentUpdateManyWithoutWrittenByInput `json:"comments,omitempty"`
}

type PostUpdateWithWhereUniqueWithoutAuthorInput struct {
	Where PostWhereUniqueInput             `json:"where"`
	Data  PostUpdateWithoutAuthorDataInput `json:"data"`
}

type PostUpdateManyMutationInput struct {
	Title     *string `json:"title,omitempty"`
	Content   *string `json:"content,omitempty"`
	Published *bool   `json:"published,omitempty"`
}

type PostUpdateWithoutAuthorDataInput struct {
	Title     *string                 `json:"title,omitempty"`
	Content   *string                 `json:"content,omitempty"`
	Published *bool                   `json:"published,omitempty"`
	Comments  *CommentUpdateManyInput `json:"comments,omitempty"`
}

type UserUpsertWithoutPostsInput struct {
	Update UserUpdateWithoutPostsDataInput `json:"update"`
	Create UserCreateWithoutPostsInput     `json:"create"`
}

type CommentUpdateManyInput struct {
	Create     []CommentCreateInput                      `json:"create,omitempty"`
	Update     []CommentUpdateWithWhereUniqueNestedInput `json:"update,omitempty"`
	Upsert     []CommentUpsertWithWhereUniqueNestedInput `json:"upsert,omitempty"`
	Delete     []CommentWhereUniqueInput                 `json:"delete,omitempty"`
	Connect    []CommentWhereUniqueInput                 `json:"connect,omitempty"`
	Disconnect []CommentWhereUniqueInput                 `json:"disconnect,omitempty"`
	DeleteMany []CommentScalarWhereInput                 `json:"deleteMany,omitempty"`
	UpdateMany []CommentUpdateManyWithWhereNestedInput   `json:"updateMany,omitempty"`
}

type CommentUpdateWithoutWrittenByDataInput struct {
	Text *string `json:"text,omitempty"`
}

type PostUpdateInput struct {
	Title     *string                                 `json:"title,omitempty"`
	Content   *string                                 `json:"content,omitempty"`
	Published *bool                                   `json:"published,omitempty"`
	Author    *UserUpdateOneRequiredWithoutPostsInput `json:"author,omitempty"`
	Comments  *CommentUpdateManyInput                 `json:"comments,omitempty"`
}

type CommentUpdateWithWhereUniqueWithoutWrittenByInput struct {
	Where CommentWhereUniqueInput                `json:"where"`
	Data  CommentUpdateWithoutWrittenByDataInput `json:"data"`
}

type CommentUpdateDataInput struct {
	Text      *string                                    `json:"text,omitempty"`
	WrittenBy *UserUpdateOneRequiredWithoutCommentsInput `json:"writtenBy,omitempty"`
}

type UserUpdateWithoutPostsDataInput struct {
	Email    *string                                 `json:"email,omitempty"`
	Name     *string                                 `json:"name,omitempty"`
	Comments *CommentUpdateManyWithoutWrittenByInput `json:"comments,omitempty"`
}

type CommentUpsertWithWhereUniqueNestedInput struct {
	Where  CommentWhereUniqueInput `json:"where"`
	Update CommentUpdateDataInput  `json:"update"`
	Create CommentCreateInput      `json:"create"`
}

type UserCreateOneWithoutCommentsInput struct {
	Create  *UserCreateWithoutCommentsInput `json:"create,omitempty"`
	Connect *UserWhereUniqueInput           `json:"connect,omitempty"`
}

type CommentCreateWithoutWrittenByInput struct {
	Text string `json:"text"`
}

type PostCreateManyWithoutAuthorInput struct {
	Create  []PostCreateWithoutAuthorInput `json:"create,omitempty"`
	Connect []PostWhereUniqueInput         `json:"connect,omitempty"`
}

type CommentUpdateManyWithWhereNestedInput struct {
	Where CommentScalarWhereInput    `json:"where"`
	Data  CommentUpdateManyDataInput `json:"data"`
}

type PostWhereInput struct {
	ID                   *string            `json:"id,omitempty"`
	IDNot                *string            `json:"id_not,omitempty"`
	IDIn                 []string           `json:"id_in,omitempty"`
	IDNotIn              []string           `json:"id_not_in,omitempty"`
	IDLt                 *string            `json:"id_lt,omitempty"`
	IDLte                *string            `json:"id_lte,omitempty"`
	IDGt                 *string            `json:"id_gt,omitempty"`
	IDGte                *string            `json:"id_gte,omitempty"`
	IDContains           *string            `json:"id_contains,omitempty"`
	IDNotContains        *string            `json:"id_not_contains,omitempty"`
	IDStartsWith         *string            `json:"id_starts_with,omitempty"`
	IDNotStartsWith      *string            `json:"id_not_starts_with,omitempty"`
	IDEndsWith           *string            `json:"id_ends_with,omitempty"`
	IDNotEndsWith        *string            `json:"id_not_ends_with,omitempty"`
	CreatedAt            *string            `json:"createdAt,omitempty"`
	CreatedAtNot         *string            `json:"createdAt_not,omitempty"`
	CreatedAtIn          []string           `json:"createdAt_in,omitempty"`
	CreatedAtNotIn       []string           `json:"createdAt_not_in,omitempty"`
	CreatedAtLt          *string            `json:"createdAt_lt,omitempty"`
	CreatedAtLte         *string            `json:"createdAt_lte,omitempty"`
	CreatedAtGt          *string            `json:"createdAt_gt,omitempty"`
	CreatedAtGte         *string            `json:"createdAt_gte,omitempty"`
	UpdatedAt            *string            `json:"updatedAt,omitempty"`
	UpdatedAtNot         *string            `json:"updatedAt_not,omitempty"`
	UpdatedAtIn          []string           `json:"updatedAt_in,omitempty"`
	UpdatedAtNotIn       []string           `json:"updatedAt_not_in,omitempty"`
	UpdatedAtLt          *string            `json:"updatedAt_lt,omitempty"`
	UpdatedAtLte         *string            `json:"updatedAt_lte,omitempty"`
	UpdatedAtGt          *string            `json:"updatedAt_gt,omitempty"`
	UpdatedAtGte         *string            `json:"updatedAt_gte,omitempty"`
	Title                *string            `json:"title,omitempty"`
	TitleNot             *string            `json:"title_not,omitempty"`
	TitleIn              []string           `json:"title_in,omitempty"`
	TitleNotIn           []string           `json:"title_not_in,omitempty"`
	TitleLt              *string            `json:"title_lt,omitempty"`
	TitleLte             *string            `json:"title_lte,omitempty"`
	TitleGt              *string            `json:"title_gt,omitempty"`
	TitleGte             *string            `json:"title_gte,omitempty"`
	TitleContains        *string            `json:"title_contains,omitempty"`
	TitleNotContains     *string            `json:"title_not_contains,omitempty"`
	TitleStartsWith      *string            `json:"title_starts_with,omitempty"`
	TitleNotStartsWith   *string            `json:"title_not_starts_with,omitempty"`
	TitleEndsWith        *string            `json:"title_ends_with,omitempty"`
	TitleNotEndsWith     *string            `json:"title_not_ends_with,omitempty"`
	Content              *string            `json:"content,omitempty"`
	ContentNot           *string            `json:"content_not,omitempty"`
	ContentIn            []string           `json:"content_in,omitempty"`
	ContentNotIn         []string           `json:"content_not_in,omitempty"`
	ContentLt            *string            `json:"content_lt,omitempty"`
	ContentLte           *string            `json:"content_lte,omitempty"`
	ContentGt            *string            `json:"content_gt,omitempty"`
	ContentGte           *string            `json:"content_gte,omitempty"`
	ContentContains      *string            `json:"content_contains,omitempty"`
	ContentNotContains   *string            `json:"content_not_contains,omitempty"`
	ContentStartsWith    *string            `json:"content_starts_with,omitempty"`
	ContentNotStartsWith *string            `json:"content_not_starts_with,omitempty"`
	ContentEndsWith      *string            `json:"content_ends_with,omitempty"`
	ContentNotEndsWith   *string            `json:"content_not_ends_with,omitempty"`
	Published            *bool              `json:"published,omitempty"`
	PublishedNot         *bool              `json:"published_not,omitempty"`
	Author               *UserWhereInput    `json:"author,omitempty"`
	CommentsEvery        *CommentWhereInput `json:"comments_every,omitempty"`
	CommentsSome         *CommentWhereInput `json:"comments_some,omitempty"`
	CommentsNone         *CommentWhereInput `json:"comments_none,omitempty"`
	And                  []PostWhereInput   `json:"AND,omitempty"`
	Or                   []PostWhereInput   `json:"OR,omitempty"`
	Not                  []PostWhereInput   `json:"NOT,omitempty"`
}

type CommentUpdateManyDataInput struct {
	Text *string `json:"text,omitempty"`
}

type UserUpdateManyMutationInput struct {
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name,omitempty"`
}

type PostUpsertWithWhereUniqueWithoutAuthorInput struct {
	Where  PostWhereUniqueInput             `json:"where"`
	Update PostUpdateWithoutAuthorDataInput `json:"update"`
	Create PostCreateWithoutAuthorInput     `json:"create"`
}

type PostWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type PostScalarWhereInput struct {
	ID                   *string                `json:"id,omitempty"`
	IDNot                *string                `json:"id_not,omitempty"`
	IDIn                 []string               `json:"id_in,omitempty"`
	IDNotIn              []string               `json:"id_not_in,omitempty"`
	IDLt                 *string                `json:"id_lt,omitempty"`
	IDLte                *string                `json:"id_lte,omitempty"`
	IDGt                 *string                `json:"id_gt,omitempty"`
	IDGte                *string                `json:"id_gte,omitempty"`
	IDContains           *string                `json:"id_contains,omitempty"`
	IDNotContains        *string                `json:"id_not_contains,omitempty"`
	IDStartsWith         *string                `json:"id_starts_with,omitempty"`
	IDNotStartsWith      *string                `json:"id_not_starts_with,omitempty"`
	IDEndsWith           *string                `json:"id_ends_with,omitempty"`
	IDNotEndsWith        *string                `json:"id_not_ends_with,omitempty"`
	CreatedAt            *string                `json:"createdAt,omitempty"`
	CreatedAtNot         *string                `json:"createdAt_not,omitempty"`
	CreatedAtIn          []string               `json:"createdAt_in,omitempty"`
	CreatedAtNotIn       []string               `json:"createdAt_not_in,omitempty"`
	CreatedAtLt          *string                `json:"createdAt_lt,omitempty"`
	CreatedAtLte         *string                `json:"createdAt_lte,omitempty"`
	CreatedAtGt          *string                `json:"createdAt_gt,omitempty"`
	CreatedAtGte         *string                `json:"createdAt_gte,omitempty"`
	UpdatedAt            *string                `json:"updatedAt,omitempty"`
	UpdatedAtNot         *string                `json:"updatedAt_not,omitempty"`
	UpdatedAtIn          []string               `json:"updatedAt_in,omitempty"`
	UpdatedAtNotIn       []string               `json:"updatedAt_not_in,omitempty"`
	UpdatedAtLt          *string                `json:"updatedAt_lt,omitempty"`
	UpdatedAtLte         *string                `json:"updatedAt_lte,omitempty"`
	UpdatedAtGt          *string                `json:"updatedAt_gt,omitempty"`
	UpdatedAtGte         *string                `json:"updatedAt_gte,omitempty"`
	Title                *string                `json:"title,omitempty"`
	TitleNot             *string                `json:"title_not,omitempty"`
	TitleIn              []string               `json:"title_in,omitempty"`
	TitleNotIn           []string               `json:"title_not_in,omitempty"`
	TitleLt              *string                `json:"title_lt,omitempty"`
	TitleLte             *string                `json:"title_lte,omitempty"`
	TitleGt              *string                `json:"title_gt,omitempty"`
	TitleGte             *string                `json:"title_gte,omitempty"`
	TitleContains        *string                `json:"title_contains,omitempty"`
	TitleNotContains     *string                `json:"title_not_contains,omitempty"`
	TitleStartsWith      *string                `json:"title_starts_with,omitempty"`
	TitleNotStartsWith   *string                `json:"title_not_starts_with,omitempty"`
	TitleEndsWith        *string                `json:"title_ends_with,omitempty"`
	TitleNotEndsWith     *string                `json:"title_not_ends_with,omitempty"`
	Content              *string                `json:"content,omitempty"`
	ContentNot           *string                `json:"content_not,omitempty"`
	ContentIn            []string               `json:"content_in,omitempty"`
	ContentNotIn         []string               `json:"content_not_in,omitempty"`
	ContentLt            *string                `json:"content_lt,omitempty"`
	ContentLte           *string                `json:"content_lte,omitempty"`
	ContentGt            *string                `json:"content_gt,omitempty"`
	ContentGte           *string                `json:"content_gte,omitempty"`
	ContentContains      *string                `json:"content_contains,omitempty"`
	ContentNotContains   *string                `json:"content_not_contains,omitempty"`
	ContentStartsWith    *string                `json:"content_starts_with,omitempty"`
	ContentNotStartsWith *string                `json:"content_not_starts_with,omitempty"`
	ContentEndsWith      *string                `json:"content_ends_with,omitempty"`
	ContentNotEndsWith   *string                `json:"content_not_ends_with,omitempty"`
	Published            *bool                  `json:"published,omitempty"`
	PublishedNot         *bool                  `json:"published_not,omitempty"`
	And                  []PostScalarWhereInput `json:"AND,omitempty"`
	Or                   []PostScalarWhereInput `json:"OR,omitempty"`
	Not                  []PostScalarWhereInput `json:"NOT,omitempty"`
}

type UserWhereUniqueInput struct {
	ID    *string `json:"id,omitempty"`
	Email *string `json:"email,omitempty"`
}

type PostUpdateManyWithWhereNestedInput struct {
	Where PostScalarWhereInput    `json:"where"`
	Data  PostUpdateManyDataInput `json:"data"`
}

type UserUpdateOneRequiredWithoutPostsInput struct {
	Create  *UserCreateWithoutPostsInput     `json:"create,omitempty"`
	Update  *UserUpdateWithoutPostsDataInput `json:"update,omitempty"`
	Upsert  *UserUpsertWithoutPostsInput     `json:"upsert,omitempty"`
	Connect *UserWhereUniqueInput            `json:"connect,omitempty"`
}

type PostUpdateManyDataInput struct {
	Title     *string `json:"title,omitempty"`
	Content   *string `json:"content,omitempty"`
	Published *bool   `json:"published,omitempty"`
}

type UserCreateWithoutCommentsInput struct {
	Email string                            `json:"email"`
	Name  *string                           `json:"name,omitempty"`
	Posts *PostCreateManyWithoutAuthorInput `json:"posts,omitempty"`
}

type UserUpsertWithoutCommentsInput struct {
	Update UserUpdateWithoutCommentsDataInput `json:"update"`
	Create UserCreateWithoutCommentsInput     `json:"create"`
}

type PostSubscriptionWhereInput struct {
	MutationIn                 []MutationType               `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                      `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                     `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                     `json:"updatedFields_contains_some,omitempty"`
	Node                       *PostWhereInput              `json:"node,omitempty"`
	And                        []PostSubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []PostSubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []PostSubscriptionWhereInput `json:"NOT,omitempty"`
}

type PostCreateInput struct {
	Title     string                         `json:"title"`
	Content   *string                        `json:"content,omitempty"`
	Published *bool                          `json:"published,omitempty"`
	Author    UserCreateOneWithoutPostsInput `json:"author"`
	Comments  *CommentCreateManyInput        `json:"comments,omitempty"`
}

type UserCreateWithoutPostsInput struct {
	Email    string                                  `json:"email"`
	Name     *string                                 `json:"name,omitempty"`
	Comments *CommentCreateManyWithoutWrittenByInput `json:"comments,omitempty"`
}

type CommentCreateManyWithoutWrittenByInput struct {
	Create  []CommentCreateWithoutWrittenByInput `json:"create,omitempty"`
	Connect []CommentWhereUniqueInput            `json:"connect,omitempty"`
}

type CommentUpdateManyMutationInput struct {
	Text *string `json:"text,omitempty"`
}

type UserCreateInput struct {
	Email    string                                  `json:"email"`
	Name     *string                                 `json:"name,omitempty"`
	Posts    *PostCreateManyWithoutAuthorInput       `json:"posts,omitempty"`
	Comments *CommentCreateManyWithoutWrittenByInput `json:"comments,omitempty"`
}

type UserWhereInput struct {
	ID                 *string            `json:"id,omitempty"`
	IDNot              *string            `json:"id_not,omitempty"`
	IDIn               []string           `json:"id_in,omitempty"`
	IDNotIn            []string           `json:"id_not_in,omitempty"`
	IDLt               *string            `json:"id_lt,omitempty"`
	IDLte              *string            `json:"id_lte,omitempty"`
	IDGt               *string            `json:"id_gt,omitempty"`
	IDGte              *string            `json:"id_gte,omitempty"`
	IDContains         *string            `json:"id_contains,omitempty"`
	IDNotContains      *string            `json:"id_not_contains,omitempty"`
	IDStartsWith       *string            `json:"id_starts_with,omitempty"`
	IDNotStartsWith    *string            `json:"id_not_starts_with,omitempty"`
	IDEndsWith         *string            `json:"id_ends_with,omitempty"`
	IDNotEndsWith      *string            `json:"id_not_ends_with,omitempty"`
	Email              *string            `json:"email,omitempty"`
	EmailNot           *string            `json:"email_not,omitempty"`
	EmailIn            []string           `json:"email_in,omitempty"`
	EmailNotIn         []string           `json:"email_not_in,omitempty"`
	EmailLt            *string            `json:"email_lt,omitempty"`
	EmailLte           *string            `json:"email_lte,omitempty"`
	EmailGt            *string            `json:"email_gt,omitempty"`
	EmailGte           *string            `json:"email_gte,omitempty"`
	EmailContains      *string            `json:"email_contains,omitempty"`
	EmailNotContains   *string            `json:"email_not_contains,omitempty"`
	EmailStartsWith    *string            `json:"email_starts_with,omitempty"`
	EmailNotStartsWith *string            `json:"email_not_starts_with,omitempty"`
	EmailEndsWith      *string            `json:"email_ends_with,omitempty"`
	EmailNotEndsWith   *string            `json:"email_not_ends_with,omitempty"`
	Name               *string            `json:"name,omitempty"`
	NameNot            *string            `json:"name_not,omitempty"`
	NameIn             []string           `json:"name_in,omitempty"`
	NameNotIn          []string           `json:"name_not_in,omitempty"`
	NameLt             *string            `json:"name_lt,omitempty"`
	NameLte            *string            `json:"name_lte,omitempty"`
	NameGt             *string            `json:"name_gt,omitempty"`
	NameGte            *string            `json:"name_gte,omitempty"`
	NameContains       *string            `json:"name_contains,omitempty"`
	NameNotContains    *string            `json:"name_not_contains,omitempty"`
	NameStartsWith     *string            `json:"name_starts_with,omitempty"`
	NameNotStartsWith  *string            `json:"name_not_starts_with,omitempty"`
	NameEndsWith       *string            `json:"name_ends_with,omitempty"`
	NameNotEndsWith    *string            `json:"name_not_ends_with,omitempty"`
	PostsEvery         *PostWhereInput    `json:"posts_every,omitempty"`
	PostsSome          *PostWhereInput    `json:"posts_some,omitempty"`
	PostsNone          *PostWhereInput    `json:"posts_none,omitempty"`
	CommentsEvery      *CommentWhereInput `json:"comments_every,omitempty"`
	CommentsSome       *CommentWhereInput `json:"comments_some,omitempty"`
	CommentsNone       *CommentWhereInput `json:"comments_none,omitempty"`
	And                []UserWhereInput   `json:"AND,omitempty"`
	Or                 []UserWhereInput   `json:"OR,omitempty"`
	Not                []UserWhereInput   `json:"NOT,omitempty"`
}

type CommentCreateInput struct {
	Text      string                            `json:"text"`
	WrittenBy UserCreateOneWithoutCommentsInput `json:"writtenBy"`
}

type CommentUpdateManyWithoutWrittenByInput struct {
	Create     []CommentCreateWithoutWrittenByInput                `json:"create,omitempty"`
	Delete     []CommentWhereUniqueInput                           `json:"delete,omitempty"`
	Connect    []CommentWhereUniqueInput                           `json:"connect,omitempty"`
	Disconnect []CommentWhereUniqueInput                           `json:"disconnect,omitempty"`
	Update     []CommentUpdateWithWhereUniqueWithoutWrittenByInput `json:"update,omitempty"`
	Upsert     []CommentUpsertWithWhereUniqueWithoutWrittenByInput `json:"upsert,omitempty"`
	DeleteMany []CommentScalarWhereInput                           `json:"deleteMany,omitempty"`
	UpdateMany []CommentUpdateManyWithWhereNestedInput             `json:"updateMany,omitempty"`
}

type CommentUpsertWithWhereUniqueWithoutWrittenByInput struct {
	Where  CommentWhereUniqueInput                `json:"where"`
	Update CommentUpdateWithoutWrittenByDataInput `json:"update"`
	Create CommentCreateWithoutWrittenByInput     `json:"create"`
}

type UserPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance UserPreviousValuesExec) Exec(ctx context.Context) (*UserPreviousValues, error) {
	var v UserPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance UserPreviousValuesExecArray) Exec(ctx context.Context) ([]UserPreviousValues, error) {
	var v []UserPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserPreviousValues struct {
	ID    string  `json:"id"`
	Email string  `json:"email"`
	Name  *string `json:"name,omitempty"`
}

type PostConnectionExec struct {
	exec *prisma.Exec
}

func (instance *PostConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *PostConnectionExec) Edges() *PostEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PostEdge"},
		"edges",
		[]string{"cursor"})

	return &PostEdgeExec{ret}
}

func (instance *PostConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregatePost"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance PostConnectionExec) Exec(ctx context.Context) (*PostConnection, error) {
	var v PostConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance PostConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type PostConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance PostConnectionExecArray) Exec(ctx context.Context) ([]PostConnection, error) {
	var v []PostConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type PostConnection struct {
}

type PostExec struct {
	exec *prisma.Exec
}

func (instance *PostExec) Author() *UserExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "User"},
		"author",
		[]string{"id", "email", "name"})

	return &UserExec{ret}
}

type CommentsParamsExec struct {
	Where   *CommentWhereInput
	OrderBy *CommentOrderByInput
	Skip    *int32
	After   *string
	Before  *string
	First   *int32
	Last    *int32
}

func (instance *PostExec) Comments(params *CommentsParamsExec) *CommentExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := instance.exec.Client.GetMany(
		instance.exec,
		wparams,
		[3]string{"CommentWhereInput", "CommentOrderByInput", "Comment"},
		"comments",
		[]string{"id", "text"})

	return &CommentExecArray{ret}
}

func (instance PostExec) Exec(ctx context.Context) (*Post, error) {
	var v Post
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance PostExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type PostExecArray struct {
	exec *prisma.Exec
}

func (instance PostExecArray) Exec(ctx context.Context) ([]Post, error) {
	var v []Post
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type Post struct {
	ID        string  `json:"id"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt string  `json:"updatedAt"`
	Title     string  `json:"title"`
	Content   *string `json:"content,omitempty"`
	Published bool    `json:"published"`
}

type CommentEdgeExec struct {
	exec *prisma.Exec
}

func (instance *CommentEdgeExec) Node() *CommentExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Comment"},
		"node",
		[]string{"id", "text"})

	return &CommentExec{ret}
}

func (instance CommentEdgeExec) Exec(ctx context.Context) (*CommentEdge, error) {
	var v CommentEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance CommentEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type CommentEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance CommentEdgeExecArray) Exec(ctx context.Context) ([]CommentEdge, error) {
	var v []CommentEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type CommentEdge struct {
	Cursor string `json:"cursor"`
}

type PostPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance PostPreviousValuesExec) Exec(ctx context.Context) (*PostPreviousValues, error) {
	var v PostPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance PostPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type PostPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance PostPreviousValuesExecArray) Exec(ctx context.Context) ([]PostPreviousValues, error) {
	var v []PostPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type PostPreviousValues struct {
	ID        string  `json:"id"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt string  `json:"updatedAt"`
	Title     string  `json:"title"`
	Content   *string `json:"content,omitempty"`
	Published bool    `json:"published"`
}

type PageInfoExec struct {
	exec *prisma.Exec
}

func (instance PageInfoExec) Exec(ctx context.Context) (*PageInfo, error) {
	var v PageInfo
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance PageInfoExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type PageInfoExecArray struct {
	exec *prisma.Exec
}

func (instance PageInfoExecArray) Exec(ctx context.Context) ([]PageInfo, error) {
	var v []PageInfo
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type UserEdgeExec struct {
	exec *prisma.Exec
}

func (instance *UserEdgeExec) Node() *UserExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "User"},
		"node",
		[]string{"id", "email", "name"})

	return &UserExec{ret}
}

func (instance UserEdgeExec) Exec(ctx context.Context) (*UserEdge, error) {
	var v UserEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance UserEdgeExecArray) Exec(ctx context.Context) ([]UserEdge, error) {
	var v []UserEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserEdge struct {
	Cursor string `json:"cursor"`
}

type CommentConnectionExec struct {
	exec *prisma.Exec
}

func (instance *CommentConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *CommentConnectionExec) Edges() *CommentEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "CommentEdge"},
		"edges",
		[]string{"cursor"})

	return &CommentEdgeExec{ret}
}

func (instance *CommentConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateComment"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance CommentConnectionExec) Exec(ctx context.Context) (*CommentConnection, error) {
	var v CommentConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance CommentConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type CommentConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance CommentConnectionExecArray) Exec(ctx context.Context) ([]CommentConnection, error) {
	var v []CommentConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type CommentConnection struct {
}

type PostSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *PostSubscriptionPayloadExec) Node() *PostExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Post"},
		"node",
		[]string{"id", "createdAt", "updatedAt", "title", "content", "published"})

	return &PostExec{ret}
}

func (instance *PostSubscriptionPayloadExec) PreviousValues() *PostPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PostPreviousValues"},
		"previousValues",
		[]string{"id", "createdAt", "updatedAt", "title", "content", "published"})

	return &PostPreviousValuesExec{ret}
}

func (instance PostSubscriptionPayloadExec) Exec(ctx context.Context) (*PostSubscriptionPayload, error) {
	var v PostSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance PostSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type PostSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance PostSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]PostSubscriptionPayload, error) {
	var v []PostSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type PostSubscriptionPayload struct {
	UpdatedFields []string `json:"updatedFields,omitempty"`
}

type PostEdgeExec struct {
	exec *prisma.Exec
}

func (instance *PostEdgeExec) Node() *PostExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Post"},
		"node",
		[]string{"id", "createdAt", "updatedAt", "title", "content", "published"})

	return &PostExec{ret}
}

func (instance PostEdgeExec) Exec(ctx context.Context) (*PostEdge, error) {
	var v PostEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance PostEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type PostEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance PostEdgeExecArray) Exec(ctx context.Context) ([]PostEdge, error) {
	var v []PostEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type PostEdge struct {
	Cursor string `json:"cursor"`
}

type CommentPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance CommentPreviousValuesExec) Exec(ctx context.Context) (*CommentPreviousValues, error) {
	var v CommentPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance CommentPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type CommentPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance CommentPreviousValuesExecArray) Exec(ctx context.Context) ([]CommentPreviousValues, error) {
	var v []CommentPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type CommentPreviousValues struct {
	ID   string `json:"id"`
	Text string `json:"text"`
}

type CommentSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *CommentSubscriptionPayloadExec) Node() *CommentExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Comment"},
		"node",
		[]string{"id", "text"})

	return &CommentExec{ret}
}

func (instance *CommentSubscriptionPayloadExec) PreviousValues() *CommentPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "CommentPreviousValues"},
		"previousValues",
		[]string{"id", "text"})

	return &CommentPreviousValuesExec{ret}
}

func (instance CommentSubscriptionPayloadExec) Exec(ctx context.Context) (*CommentSubscriptionPayload, error) {
	var v CommentSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance CommentSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type CommentSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance CommentSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]CommentSubscriptionPayload, error) {
	var v []CommentSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type CommentSubscriptionPayload struct {
	UpdatedFields []string `json:"updatedFields,omitempty"`
}

type CommentExec struct {
	exec *prisma.Exec
}

func (instance *CommentExec) WrittenBy() *UserExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "User"},
		"writtenBy",
		[]string{"id", "email", "name"})

	return &UserExec{ret}
}

func (instance CommentExec) Exec(ctx context.Context) (*Comment, error) {
	var v Comment
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance CommentExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type CommentExecArray struct {
	exec *prisma.Exec
}

func (instance CommentExecArray) Exec(ctx context.Context) ([]Comment, error) {
	var v []Comment
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type Comment struct {
	ID   string `json:"id"`
	Text string `json:"text"`
}

type UserExec struct {
	exec *prisma.Exec
}

type PostsParamsExec struct {
	Where   *PostWhereInput
	OrderBy *PostOrderByInput
	Skip    *int32
	After   *string
	Before  *string
	First   *int32
	Last    *int32
}

func (instance *UserExec) Posts(params *PostsParamsExec) *PostExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := instance.exec.Client.GetMany(
		instance.exec,
		wparams,
		[3]string{"PostWhereInput", "PostOrderByInput", "Post"},
		"posts",
		[]string{"id", "createdAt", "updatedAt", "title", "content", "published"})

	return &PostExecArray{ret}
}

func (instance *UserExec) Comments(params *CommentsParamsExec) *CommentExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := instance.exec.Client.GetMany(
		instance.exec,
		wparams,
		[3]string{"CommentWhereInput", "CommentOrderByInput", "Comment"},
		"comments",
		[]string{"id", "text"})

	return &CommentExecArray{ret}
}

func (instance UserExec) Exec(ctx context.Context) (*User, error) {
	var v User
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserExecArray struct {
	exec *prisma.Exec
}

func (instance UserExecArray) Exec(ctx context.Context) ([]User, error) {
	var v []User
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type User struct {
	ID    string  `json:"id"`
	Email string  `json:"email"`
	Name  *string `json:"name,omitempty"`
}

type UserSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *UserSubscriptionPayloadExec) Node() *UserExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "User"},
		"node",
		[]string{"id", "email", "name"})

	return &UserExec{ret}
}

func (instance *UserSubscriptionPayloadExec) PreviousValues() *UserPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "UserPreviousValues"},
		"previousValues",
		[]string{"id", "email", "name"})

	return &UserPreviousValuesExec{ret}
}

func (instance UserSubscriptionPayloadExec) Exec(ctx context.Context) (*UserSubscriptionPayload, error) {
	var v UserSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance UserSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]UserSubscriptionPayload, error) {
	var v []UserSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserSubscriptionPayload struct {
	UpdatedFields []string `json:"updatedFields,omitempty"`
}

type UserConnectionExec struct {
	exec *prisma.Exec
}

func (instance *UserConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *UserConnectionExec) Edges() *UserEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "UserEdge"},
		"edges",
		[]string{"cursor"})

	return &UserEdgeExec{ret}
}

func (instance *UserConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateUser"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance UserConnectionExec) Exec(ctx context.Context) (*UserConnection, error) {
	var v UserConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance UserConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type UserConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance UserConnectionExecArray) Exec(ctx context.Context) ([]UserConnection, error) {
	var v []UserConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type UserConnection struct {
}
