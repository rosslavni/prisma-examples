import { GraphQLResolveInfo, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import {
  makePrismaBindingClass,
  BasePrismaOptions,
  Options
} from "prisma-client-lib";
import { typeDefs } from "./graphql";
// Code generated by Prisma CLI (https://github.com/prisma/prisma). DO NOT EDIT.

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  todo: (where?: TodoWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $delegate: Delegate;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  todo: <T = Todo>(
    where: TodoWhereUniqueInput,
    fragment?: string | Object
  ) => T;
  todoes: <T = Promise<Array<TodoNode>>>(
    args?: {
      where?: TodoWhereInput;
      orderBy?: TodoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    fragment?: string | Object
  ) => T;
  todoesConnection: <T = TodoConnection>(
    args?: {
      where?: TodoWhereInput;
      orderBy?: TodoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    fragment?: string | Object
  ) => T;
  node: <T = Node>(args: { id: ID_Output }, fragment?: string | Object) => T;

  /**
   * Mutations
   */

  createTodo: <T = Todo>(
    data: TodoCreateInput,
    fragment?: string | Object
  ) => T;
  updateTodo: <T = Todo>(
    args: { data: TodoUpdateInput; where: TodoWhereUniqueInput },
    fragment?: string | Object
  ) => T;
  updateManyTodoes: <T = BatchPayload>(
    args: { data: TodoUpdateInput; where?: TodoWhereInput },
    fragment?: string | Object
  ) => T;
  upsertTodo: <T = Todo>(
    args: {
      where: TodoWhereUniqueInput;
      create: TodoCreateInput;
      update: TodoUpdateInput;
    },
    fragment?: string | Object
  ) => T;
  deleteTodo: <T = Todo>(
    where: TodoWhereUniqueInput,
    fragment?: string | Object
  ) => T;
  deleteManyTodoes: <T = BatchPayload>(
    where?: TodoWhereInput,
    fragment?: string | Object
  ) => T;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  todo: <T = TodoSubscriptionPayloadSubscription>(
    where?: TodoSubscriptionWhereInput,
    fragment?: string | Object
  ) => T;
}

export interface Delegate {
  (
    operation: "query" | "mutation",
    fieldName: string,
    args: {
      [key: string]: any;
    },
    infoOrQuery?: GraphQLResolveInfo,
    options?: Options
  ): Promise<any>;
  query: DelegateQuery;
  mutation: DelegateMutation;
  subscription: DelegateSubscription;
}

export interface DelegateQuery {
  todo: <T = Promise<Partial<TodoNode | null>>>(
    where: TodoWhereUniqueInput,
    fragment?: string | Object
  ) => T;
  todoes: <T = Promise<Array<TodoNode>>>(
    args?: {
      where?: TodoWhereInput;
      orderBy?: TodoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    info?: GraphQLResolveInfo,
    options?: Options
  ) => T;
  todoesConnection: <T = Promise<Partial<TodoConnectionNode>>>(
    args?: {
      where?: TodoWhereInput;
      orderBy?: TodoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    info?: GraphQLResolveInfo,
    options?: Options
  ) => T;
  node: <T = Promise<Partial<NodeNode | null>>>(
    args: { id: ID_Output },
    info?: GraphQLResolveInfo,
    options?: Options
  ) => T;
}

export interface DelegateMutation {
  createTodo: <T = Promise<Partial<TodoNode>>>(
    where: TodoCreateInput,
    fragment?: string | Object
  ) => T;
  updateTodo: <T = Promise<Partial<TodoNode | null>>>(
    args: { data: TodoUpdateInput; where: TodoWhereUniqueInput },
    info?: GraphQLResolveInfo,
    options?: Options
  ) => T;
  updateManyTodoes: <T = Promise<Partial<BatchPayloadNode>>>(
    args: { data: TodoUpdateInput; where?: TodoWhereInput },
    info?: GraphQLResolveInfo,
    options?: Options
  ) => T;
  upsertTodo: <T = Promise<Partial<TodoNode>>>(
    args: {
      where: TodoWhereUniqueInput;
      create: TodoCreateInput;
      update: TodoUpdateInput;
    },
    info?: GraphQLResolveInfo,
    options?: Options
  ) => T;
  deleteTodo: <T = Promise<Partial<TodoNode | null>>>(
    where: TodoWhereUniqueInput,
    fragment?: string | Object
  ) => T;
  deleteManyTodoes: <T = Promise<Partial<BatchPayloadNode>>>(
    where?: TodoWhereInput,
    fragment?: string | Object
  ) => T;
}

export interface DelegateSubscription {
  todo: <
    T = Promise<AsyncIterator<Partial<TodoSubscriptionPayloadNode | null>>>
  >(
    where?: TodoSubscriptionWhereInput,
    fragment?: string | Object
  ) => T;
}

export interface BindingConstructor<T> {
  new (options?: BasePrismaOptions): T;
}

/**
 * Types
 */

export type TodoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TodoCreateInput {
  title: String;
}

export interface TodoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: TodoWhereInput[] | TodoWhereInput;
  OR?: TodoWhereInput[] | TodoWhereInput;
  NOT?: TodoWhereInput[] | TodoWhereInput;
}

export interface TodoUpdateInput {
  title?: String;
}

export interface TodoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TodoWhereInput;
  AND?: TodoSubscriptionWhereInput[] | TodoSubscriptionWhereInput;
  OR?: TodoSubscriptionWhereInput[] | TodoSubscriptionWhereInput;
  NOT?: TodoSubscriptionWhereInput[] | TodoSubscriptionWhereInput;
}

export type TodoWhereUniqueInput = AtLeastOne<{
  id?: ID_Input;
  title?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface TodoEdgeNode {
  cursor: String;
}

export interface TodoEdge extends Promise<TodoEdgeNode> {
  node: <T = Todo>() => T;
  cursor: () => Promise<String>;
}

export interface TodoEdgeSubscription
  extends Promise<AsyncIterator<TodoEdgeNode>> {
  node: <T = TodoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TodoPreviousValuesNode {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
}

export interface TodoPreviousValues extends Promise<TodoPreviousValuesNode> {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TodoPreviousValuesSubscription
  extends Promise<AsyncIterator<TodoPreviousValuesNode>> {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode> {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>> {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTodoNode {
  count: Int;
}

export interface AggregateTodo extends Promise<AggregateTodoNode> {
  count: () => Promise<Int>;
}

export interface AggregateTodoSubscription
  extends Promise<AsyncIterator<AggregateTodoNode>> {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TodoNode {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
}

export interface Todo extends Promise<TodoNode> {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TodoSubscription extends Promise<AsyncIterator<TodoNode>> {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TodoSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TodoSubscriptionPayload
  extends Promise<TodoSubscriptionPayloadNode> {
  mutation: () => Promise<MutationType>;
  node: <T = Todo>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TodoPreviousValues>() => T;
}

export interface TodoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TodoSubscriptionPayloadNode>> {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TodoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TodoPreviousValuesSubscription>() => T;
}

export interface TodoConnectionNode {}

export interface TodoConnection extends Promise<TodoConnectionNode> {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<TodoEdgeNode>>>() => T;
  aggregate: <T = AggregateTodo>() => T;
}

export interface TodoConnectionSubscription
  extends Promise<AsyncIterator<TodoConnectionNode>> {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<TodoEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateTodoSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode> {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>> {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaBindingClass<BindingConstructor<Prisma>>({
  typeDefs,
  endpoint: "http://localhost:4466/cli-tool/default"
});
export const prisma = new Prisma();
