// Code generated by Prisma CLI (https://github.com/prisma/prisma). DO NOT EDIT.
/**
 * @flow
 */
import type { GraphQLResolveInfo, GraphQLSchema } from 'graphql'
import type { IResolvers } from 'graphql-tools'
import type { BasePrismaOptions as BPOType, Options } from 'prisma-lib'
import { makePrismaBindingClass} from 'prisma-lib'
import { typeDefs } from './graphql'

export interface Exists {
Cat(where?: CatWhereInput): Promise<boolean>;
Master(where?: MasterWhereInput): Promise<boolean>;
}

export interface Node {}

interface Prisma {
  $exists: Exists;
  $graphql(query: string, variables?: {[key: string]: any}): Promise<any>;
  $delegate: Delegate;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
  */

    cat: (where: CatWhereUniqueInput) => Cat;
    cats: (args?: { where?: CatWhereInput, orderBy?: CatOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }) => Promise<Array<CatNode>>;
    catsConnection: (args?: { where?: CatWhereInput, orderBy?: CatOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }) => CatConnection;
    master: (where: MasterWhereUniqueInput) => Master;
    masters: (args?: { where?: MasterWhereInput, orderBy?: MasterOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }) => Promise<Array<MasterNode>>;
    mastersConnection: (args?: { where?: MasterWhereInput, orderBy?: MasterOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }) => MasterConnection;
    node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
  */

    createCat: (data: CatCreateInput) => Cat;
    updateCat: (args: { data: CatUpdateInput, where: CatWhereUniqueInput }) => Cat;
    updateManyCats: (args: { data: CatUpdateInput, where?: CatWhereInput }) => BatchPayload;
    upsertCat: (args: { where: CatWhereUniqueInput, create: CatCreateInput, update: CatUpdateInput }) => Cat;
    deleteCat: (where: CatWhereUniqueInput) => Cat;
    deleteManyCats: (where?: CatWhereInput) => BatchPayload;
    createMaster: (data: MasterCreateInput) => Master;
    updateMaster: (args: { data: MasterUpdateInput, where: MasterWhereUniqueInput }) => Master;
    updateManyMasters: (args: { data: MasterUpdateInput, where?: MasterWhereInput }) => BatchPayload;
    upsertMaster: (args: { where: MasterWhereUniqueInput, create: MasterCreateInput, update: MasterUpdateInput }) => Master;
    deleteMaster: (where: MasterWhereUniqueInput) => Master;
    deleteManyMasters: (where?: MasterWhereInput) => BatchPayload;

  /**
   * Subscriptions
  */

  $subscribe: Subscription

}

export interface Subscription {
      cat: (where?: CatSubscriptionWhereInput) => Promise<AsyncIterator<T>>;
    master: (where?: MasterSubscriptionWhereInput) => Promise<AsyncIterator<T>>;
}

export interface Delegate {
  (
    operation: 'query' | 'mutation',
    fieldName: string,
    args: {
      [key: string]: any
    },
    infoOrQuery?: GraphQLResolveInfo,
    options?: Options,
  ): Promise<any>,
  query: DelegateQuery,
  mutation: DelegateMutation
}

export interface DelegateQuery {
    cat: <T>(where: CatWhereUniqueInput) => T;
    cats: <T>(args?: { where?: CatWhereInput, orderBy?: CatOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo, options?: Options) => T;
    catsConnection: <T>(args?: { where?: CatWhereInput, orderBy?: CatOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo, options?: Options) => T;
    master: <T>(where: MasterWhereUniqueInput) => T;
    masters: <T>(args?: { where?: MasterWhereInput, orderBy?: MasterOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo, options?: Options) => T;
    mastersConnection: <T>(args?: { where?: MasterWhereInput, orderBy?: MasterOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo, options?: Options) => T;
    node: <T>(args: { id: ID_Output }, info?: GraphQLResolveInfo, options?: Options) => T
}

export interface DelegateMutation {
    createCat: <T>(where: CatCreateInput) => T;
    updateCat: <T>(args: { data: CatUpdateInput, where: CatWhereUniqueInput }, info?: GraphQLResolveInfo, options?: Options) => T;
    updateManyCats: <T>(args: { data: CatUpdateInput, where?: CatWhereInput }, info?: GraphQLResolveInfo, options?: Options) => T;
    upsertCat: <T>(args: { where: CatWhereUniqueInput, create: CatCreateInput, update: CatUpdateInput }, info?: GraphQLResolveInfo, options?: Options) => T;
    deleteCat: <T>(where: CatWhereUniqueInput) => T;
    deleteManyCats: <T>(where?: CatWhereInput) => T;
    createMaster: <T>(where: MasterCreateInput) => T;
    updateMaster: <T>(args: { data: MasterUpdateInput, where: MasterWhereUniqueInput }, info?: GraphQLResolveInfo, options?: Options) => T;
    updateManyMasters: <T>(args: { data: MasterUpdateInput, where?: MasterWhereInput }, info?: GraphQLResolveInfo, options?: Options) => T;
    upsertMaster: <T>(args: { where: MasterWhereUniqueInput, create: MasterCreateInput, update: MasterUpdateInput }, info?: GraphQLResolveInfo, options?: Options) => T;
    deleteMaster: <T>(where: MasterWhereUniqueInput) => T;
    deleteManyMasters: <T>(where?: MasterWhereInput) => T
}

export interface DelegateSubcription {
    cat: <T>(where?: CatSubscriptionWhereInput) => Promise<AsyncIterator<T>>;
    master: <T>(where?: MasterSubscriptionWhereInput) => Promise<AsyncIterator<T>>
}

export interface BindingConstructor<T> {
  new(options?: BPOType): T
}

/**
 * Types
*/

export type CatOrderByInput =   'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'color_ASC' |
  'color_DESC'

export type MasterOrderByInput =   'id_ASC' |
  'id_DESC'

export type MutationType =   'CREATE' |
  'UPDATE' |
  'DELETE'

export interface CatCreateInput {
  name: String,
  color: String,
  favBrother?: CatCreateOneInput,
}

export interface CatWhereUniqueInput {
  id?: ID_Input,
}

export interface CatUpdateOneInput {
  create?: CatCreateInput,
  update?: CatUpdateDataInput,
  upsert?: CatUpsertNestedInput,
  delete?: Boolean,
  disconnect?: Boolean,
  connect?: CatWhereUniqueInput,
}

export interface CatWhereInput {
  id?: ID_Input,
  id_not?: ID_Input,
  id_in?: ID_Input[] | ID_Input,
  id_not_in?: ID_Input[] | ID_Input,
  id_lt?: ID_Input,
  id_lte?: ID_Input,
  id_gt?: ID_Input,
  id_gte?: ID_Input,
  id_contains?: ID_Input,
  id_not_contains?: ID_Input,
  id_starts_with?: ID_Input,
  id_not_starts_with?: ID_Input,
  id_ends_with?: ID_Input,
  id_not_ends_with?: ID_Input,
  name?: String,
  name_not?: String,
  name_in?: String[] | String,
  name_not_in?: String[] | String,
  name_lt?: String,
  name_lte?: String,
  name_gt?: String,
  name_gte?: String,
  name_contains?: String,
  name_not_contains?: String,
  name_starts_with?: String,
  name_not_starts_with?: String,
  name_ends_with?: String,
  name_not_ends_with?: String,
  color?: String,
  color_not?: String,
  color_in?: String[] | String,
  color_not_in?: String[] | String,
  color_lt?: String,
  color_lte?: String,
  color_gt?: String,
  color_gte?: String,
  color_contains?: String,
  color_not_contains?: String,
  color_starts_with?: String,
  color_not_starts_with?: String,
  color_ends_with?: String,
  color_not_ends_with?: String,
  favBrother?: CatWhereInput,
  AND?: CatWhereInput[] | CatWhereInput,
  OR?: CatWhereInput[] | CatWhereInput,
  NOT?: CatWhereInput[] | CatWhereInput,
}

export interface CatUpdateManyInput {
  create?: CatCreateInput[] | CatCreateInput,
  delete?: CatWhereUniqueInput[] | CatWhereUniqueInput,
  connect?: CatWhereUniqueInput[] | CatWhereUniqueInput,
  disconnect?: CatWhereUniqueInput[] | CatWhereUniqueInput,
  update?: CatUpdateWithWhereUniqueNestedInput[] | CatUpdateWithWhereUniqueNestedInput,
  upsert?: CatUpsertWithWhereUniqueNestedInput[] | CatUpsertWithWhereUniqueNestedInput,
}

export interface CatUpdateInput {
  name?: String,
  color?: String,
  favBrother?: CatUpdateOneInput,
}

export interface MasterUpdateInput {
  catz?: CatUpdateManyInput,
}

export interface CatUpdateDataInput {
  name?: String,
  color?: String,
  favBrother?: CatUpdateOneInput,
}

export interface CatCreateManyInput {
  create?: CatCreateInput[] | CatCreateInput,
  connect?: CatWhereUniqueInput[] | CatWhereUniqueInput,
}

export interface CatSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType,
  updatedFields_contains?: String,
  updatedFields_contains_every?: String[] | String,
  updatedFields_contains_some?: String[] | String,
  node?: CatWhereInput,
  AND?: CatSubscriptionWhereInput[] | CatSubscriptionWhereInput,
  OR?: CatSubscriptionWhereInput[] | CatSubscriptionWhereInput,
  NOT?: CatSubscriptionWhereInput[] | CatSubscriptionWhereInput,
}

export interface MasterWhereUniqueInput {
  id?: ID_Input,
}

export interface CatCreateOneInput {
  create?: CatCreateInput,
  connect?: CatWhereUniqueInput,
}

export interface CatUpsertNestedInput {
  update: CatUpdateDataInput,
  create: CatCreateInput,
}

export interface MasterCreateInput {
  catz?: CatCreateManyInput,
}

export interface CatUpdateWithWhereUniqueNestedInput {
  where: CatWhereUniqueInput,
  data: CatUpdateDataInput,
}

export interface CatUpsertWithWhereUniqueNestedInput {
  where: CatWhereUniqueInput,
  update: CatUpdateDataInput,
  create: CatCreateInput,
}

export interface MasterSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType,
  updatedFields_contains?: String,
  updatedFields_contains_every?: String[] | String,
  updatedFields_contains_some?: String[] | String,
  node?: MasterWhereInput,
  AND?: MasterSubscriptionWhereInput[] | MasterSubscriptionWhereInput,
  OR?: MasterSubscriptionWhereInput[] | MasterSubscriptionWhereInput,
  NOT?: MasterSubscriptionWhereInput[] | MasterSubscriptionWhereInput,
}

export interface MasterWhereInput {
  id?: ID_Input,
  id_not?: ID_Input,
  id_in?: ID_Input[] | ID_Input,
  id_not_in?: ID_Input[] | ID_Input,
  id_lt?: ID_Input,
  id_lte?: ID_Input,
  id_gt?: ID_Input,
  id_gte?: ID_Input,
  id_contains?: ID_Input,
  id_not_contains?: ID_Input,
  id_starts_with?: ID_Input,
  id_not_starts_with?: ID_Input,
  id_ends_with?: ID_Input,
  id_not_ends_with?: ID_Input,
  catz_every?: CatWhereInput,
  catz_some?: CatWhereInput,
  catz_none?: CatWhereInput,
  AND?: MasterWhereInput[] | MasterWhereInput,
  OR?: MasterWhereInput[] | MasterWhereInput,
  NOT?: MasterWhereInput[] | MasterWhereInput,
}

export interface NodeNode {
  id: ID_Output,
}

export interface MasterPreviousValuesNode {
  id: ID_Output,
}

export interface MasterPreviousValues extends Promise<MasterPreviousValuesNode> {
  id: () => Promise<ID_Output>,
}

export interface MasterNode {
  id: ID_Output,
}

export interface Master extends Promise<MasterNode> {
  id: () => Promise<ID_Output>,
  catz: (args?: { where?: CatWhereInput, orderBy?: CatOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }) => Promise<Array<CatNode>>,
}

export interface CatConnectionNode {

}

export interface CatConnection extends Promise<CatConnectionNode> {
  pageInfo: () => PageInfo,
  edges: () => Promise<Array<CatEdgeNode>>,
  aggregate: () => AggregateCat,
}

export interface CatPreviousValuesNode {
  id: ID_Output,
  name: String,
  color: String,
}

export interface CatPreviousValues extends Promise<CatPreviousValuesNode> {
  id: () => Promise<ID_Output>,
  name: () => Promise<String>,
  color: () => Promise<String>,
}

export interface CatSubscriptionPayloadNode {
  mutation: MutationType,
  updatedFields?: String[],
}

export interface CatSubscriptionPayload extends Promise<CatSubscriptionPayloadNode> {
  mutation: () => Promise<MutationType>,
  node: () => Cat,
  updatedFields: () => Promise<String[]>,
  previousValues: () => CatPreviousValues,
}

export interface AggregateCatNode {
  count: Int,
}

export interface AggregateCat extends Promise<AggregateCatNode> {
  count: () => Promise<Int>,
}

export interface CatNode {
  id: ID_Output,
  name: String,
  color: String,
}

export interface Cat extends Promise<CatNode> {
  id: () => Promise<ID_Output>,
  name: () => Promise<String>,
  color: () => Promise<String>,
  favBrother: (args?: { where?: CatWhereInput }) => Cat,
}

export interface CatEdgeNode {
  cursor: String,
}

export interface CatEdge extends Promise<CatEdgeNode> {
  node: () => Cat,
  cursor: () => Promise<String>,
}

export interface BatchPayloadNode {
  count: Long,
}

export interface BatchPayload extends Promise<BatchPayloadNode> {
  count: () => Promise<Long>,
}

export interface PageInfoNode {
  hasNextPage: Boolean,
  hasPreviousPage: Boolean,
  startCursor?: String,
  endCursor?: String,
}

export interface PageInfo extends Promise<PageInfoNode> {
  hasNextPage: () => Promise<Boolean>,
  hasPreviousPage: () => Promise<Boolean>,
  startCursor: () => Promise<String>,
  endCursor: () => Promise<String>,
}

export interface MasterSubscriptionPayloadNode {
  mutation: MutationType,
  updatedFields?: String[],
}

export interface MasterSubscriptionPayload extends Promise<MasterSubscriptionPayloadNode> {
  mutation: () => Promise<MutationType>,
  node: () => Master,
  updatedFields: () => Promise<String[]>,
  previousValues: () => MasterPreviousValues,
}

export interface MasterConnectionNode {

}

export interface MasterConnection extends Promise<MasterConnectionNode> {
  pageInfo: () => PageInfo,
  edges: () => Promise<Array<MasterEdgeNode>>,
  aggregate: () => AggregateMaster,
}

export interface MasterEdgeNode {
  cursor: String,
}

export interface MasterEdge extends Promise<MasterEdgeNode> {
  node: () => Master,
  cursor: () => Promise<String>,
}

export interface AggregateMasterNode {
  count: Int,
}

export interface AggregateMaster extends Promise<AggregateMasterNode> {
  count: () => Promise<Int>,
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

export type Long = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

const prisma: BindingConstructor<Prisma> = makePrismaBindingClass({typeDefs, endpoint: 'https://eu1.prisma.sh/lol/prisma/dev'})
    export { prisma as Prisma }
