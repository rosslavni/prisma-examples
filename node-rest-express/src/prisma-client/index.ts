// Code generated by Prisma CLI (https://github.com/prisma/prisma) and prisma-client-lib@0.2.56. DO NOT EDIT.

import { GraphQLResolveInfo, GraphQLSchema } from 'graphql'
import { IResolvers } from 'graphql-tools/dist/Interfaces'
import { makePrismaClientClass, BaseClientOptions } from 'prisma-client-lib'
import { typeDefs } from './prisma-schema'

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U]

export interface Exists {
  house: (where?: HouseWhereInput) => Promise<boolean>
  window: (where?: WindowWhereInput) => Promise<boolean>
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T
}

export interface Prisma {
  $exists: Exists
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any },
  ) => Promise<T>
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers

  /**
   * Queries
   */

  house: (where: HouseWhereUniqueInput) => House
  houses: (
    args?: {
      where?: HouseWhereInput
      orderBy?: HouseOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => Promise<Array<HouseNode>>
  housesConnection: (
    args?: {
      where?: HouseWhereInput
      orderBy?: HouseOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => HouseConnection
  window: (where: WindowWhereUniqueInput) => Window
  windows: (
    args?: {
      where?: WindowWhereInput
      orderBy?: WindowOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => Promise<Array<WindowNode>>
  windowsConnection: (
    args?: {
      where?: WindowWhereInput
      orderBy?: WindowOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => WindowConnection
  node: (args: { id: ID_Output }) => Node

  /**
   * Mutations
   */

  createHouse: (data: HouseCreateInput) => House
  updateHouse: (
    args: { data: HouseUpdateInput; where: HouseWhereUniqueInput },
  ) => House
  updateManyHouses: (
    args: { data: HouseUpdateInput; where?: HouseWhereInput },
  ) => BatchPayload
  upsertHouse: (
    args: {
      where: HouseWhereUniqueInput
      create: HouseCreateInput
      update: HouseUpdateInput
    },
  ) => House
  deleteHouse: (where: HouseWhereUniqueInput) => House
  deleteManyHouses: (where?: HouseWhereInput) => BatchPayload
  createWindow: (data: WindowCreateInput) => Window
  updateWindow: (
    args: { data: WindowUpdateInput; where: WindowWhereUniqueInput },
  ) => Window
  updateManyWindows: (
    args: { data: WindowUpdateInput; where?: WindowWhereInput },
  ) => BatchPayload
  upsertWindow: (
    args: {
      where: WindowWhereUniqueInput
      create: WindowCreateInput
      update: WindowUpdateInput
    },
  ) => Window
  deleteWindow: (where: WindowWhereUniqueInput) => Window
  deleteManyWindows: (where?: WindowWhereInput) => BatchPayload

  /**
   * Subscriptions
   */

  $subscribe: Subscription
}

export interface Subscription {
  house: (
    where?: HouseSubscriptionWhereInput,
  ) => HouseSubscriptionPayloadSubscription
  window: (
    where?: WindowSubscriptionWhereInput,
  ) => WindowSubscriptionPayloadSubscription
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T
}

/**
 * Types
 */

export type WindowOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'size_ASC'
  | 'size_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED'

export type HouseOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export interface WindowUpsertWithWhereUniqueNestedInput {
  where: WindowWhereUniqueInput
  update: WindowUpdateDataInput
  create: WindowCreateInput
}

export interface HouseCreateInput {
  windows?: WindowCreateManyInput
  name: String
}

export interface WindowUpdateWithWhereUniqueNestedInput {
  where: WindowWhereUniqueInput
  data: WindowUpdateDataInput
}

export type HouseWhereUniqueInput = AtLeastOne<{
  id?: ID_Input
}>

export interface WindowUpdateManyInput {
  create?: WindowCreateInput[] | WindowCreateInput
  delete?: WindowWhereUniqueInput[] | WindowWhereUniqueInput
  connect?: WindowWhereUniqueInput[] | WindowWhereUniqueInput
  disconnect?: WindowWhereUniqueInput[] | WindowWhereUniqueInput
  update?:
    | WindowUpdateWithWhereUniqueNestedInput[]
    | WindowUpdateWithWhereUniqueNestedInput
  upsert?:
    | WindowUpsertWithWhereUniqueNestedInput[]
    | WindowUpsertWithWhereUniqueNestedInput
}

export interface HouseSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: HouseWhereInput
  AND?: HouseSubscriptionWhereInput[] | HouseSubscriptionWhereInput
  OR?: HouseSubscriptionWhereInput[] | HouseSubscriptionWhereInput
  NOT?: HouseSubscriptionWhereInput[] | HouseSubscriptionWhereInput
}

export interface HouseWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  windows_every?: WindowWhereInput
  windows_some?: WindowWhereInput
  windows_none?: WindowWhereInput
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  AND?: HouseWhereInput[] | HouseWhereInput
  OR?: HouseWhereInput[] | HouseWhereInput
  NOT?: HouseWhereInput[] | HouseWhereInput
}

export interface WindowCreateManyInput {
  create?: WindowCreateInput[] | WindowCreateInput
  connect?: WindowWhereUniqueInput[] | WindowWhereUniqueInput
}

export interface WindowCreateInput {
  size: Int
}

export type WindowWhereUniqueInput = AtLeastOne<{
  id?: ID_Input
}>

export interface HouseUpdateInput {
  windows?: WindowUpdateManyInput
  name?: String
}

export interface WindowWhereInput {
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  size?: Int
  size_not?: Int
  size_in?: Int[] | Int
  size_not_in?: Int[] | Int
  size_lt?: Int
  size_lte?: Int
  size_gt?: Int
  size_gte?: Int
  AND?: WindowWhereInput[] | WindowWhereInput
  OR?: WindowWhereInput[] | WindowWhereInput
  NOT?: WindowWhereInput[] | WindowWhereInput
}

export interface WindowUpdateInput {
  size?: Int
}

export interface WindowUpdateDataInput {
  size?: Int
}

export interface WindowSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: WindowWhereInput
  AND?: WindowSubscriptionWhereInput[] | WindowSubscriptionWhereInput
  OR?: WindowSubscriptionWhereInput[] | WindowSubscriptionWhereInput
  NOT?: WindowSubscriptionWhereInput[] | WindowSubscriptionWhereInput
}

export interface NodeNode {
  id: ID_Output
}

export interface BatchPayloadNode {
  count: Long
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>
}

export interface WindowPreviousValuesNode {
  id: ID_Output
  size: Int
}

export interface WindowPreviousValues
  extends Promise<WindowPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>
  size: () => Promise<Int>
}

export interface WindowPreviousValuesSubscription
  extends Promise<AsyncIterator<WindowPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  size: () => Promise<AsyncIterator<Int>>
}

export interface AggregateWindowNode {
  count: Int
}

export interface AggregateWindow
  extends Promise<AggregateWindowNode>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateWindowSubscription
  extends Promise<AsyncIterator<AggregateWindowNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface HouseSubscriptionPayloadNode {
  mutation: MutationType
  updatedFields?: String[]
}

export interface HouseSubscriptionPayload
  extends Promise<HouseSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = House>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = HousePreviousValues>() => T
}

export interface HouseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HouseSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = HouseSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = HousePreviousValuesSubscription>() => T
}

export interface WindowEdgeNode {
  cursor: String
}

export interface WindowEdge extends Promise<WindowEdgeNode>, Fragmentable {
  node: <T = Window>() => T
  cursor: () => Promise<String>
}

export interface WindowEdgeSubscription
  extends Promise<AsyncIterator<WindowEdgeNode>>,
    Fragmentable {
  node: <T = WindowSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export interface HousePreviousValuesNode {
  id: ID_Output
  name: String
}

export interface HousePreviousValues
  extends Promise<HousePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>
  name: () => Promise<String>
}

export interface HousePreviousValuesSubscription
  extends Promise<AsyncIterator<HousePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  name: () => Promise<AsyncIterator<String>>
}

export interface HouseNode {
  id: ID_Output
  name: String
}

export interface House extends Promise<HouseNode>, Fragmentable {
  id: () => Promise<ID_Output>
  windows: <T = Promise<Array<WindowNode>>>(
    args?: {
      where?: WindowWhereInput
      orderBy?: WindowOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => T
  name: () => Promise<String>
}

export interface HouseSubscription
  extends Promise<AsyncIterator<HouseNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  windows: <T = Promise<AsyncIterator<Array<WindowSubscription>>>>(
    args?: {
      where?: WindowWhereInput
      orderBy?: WindowOrderByInput
      skip?: Int
      after?: String
      before?: String
      first?: Int
      last?: Int
    },
  ) => T
  name: () => Promise<AsyncIterator<String>>
}

export interface WindowNode {
  id: ID_Output
  size: Int
}

export interface Window extends Promise<WindowNode>, Fragmentable {
  id: () => Promise<ID_Output>
  size: () => Promise<Int>
}

export interface WindowSubscription
  extends Promise<AsyncIterator<WindowNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>
  size: () => Promise<AsyncIterator<Int>>
}

export interface WindowConnectionNode {}

export interface WindowConnection
  extends Promise<WindowConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T
  edges: <T = Promise<Array<WindowEdgeNode>>>() => T
  aggregate: <T = AggregateWindow>() => T
}

export interface WindowConnectionSubscription
  extends Promise<AsyncIterator<WindowConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<Array<WindowEdgeSubscription>>>>() => T
  aggregate: <T = AggregateWindowSubscription>() => T
}

export interface AggregateHouseNode {
  count: Int
}

export interface AggregateHouse
  extends Promise<AggregateHouseNode>,
    Fragmentable {
  count: () => Promise<Int>
}

export interface AggregateHouseSubscription
  extends Promise<AsyncIterator<AggregateHouseNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>
}

export interface HouseConnectionNode {}

export interface HouseConnection
  extends Promise<HouseConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T
  edges: <T = Promise<Array<HouseEdgeNode>>>() => T
  aggregate: <T = AggregateHouse>() => T
}

export interface HouseConnectionSubscription
  extends Promise<AsyncIterator<HouseConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T
  edges: <T = Promise<AsyncIterator<Array<HouseEdgeSubscription>>>>() => T
  aggregate: <T = AggregateHouseSubscription>() => T
}

export interface PageInfoNode {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>
  hasPreviousPage: () => Promise<Boolean>
  startCursor: () => Promise<String>
  endCursor: () => Promise<String>
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>
  startCursor: () => Promise<AsyncIterator<String>>
  endCursor: () => Promise<AsyncIterator<String>>
}

export interface WindowSubscriptionPayloadNode {
  mutation: MutationType
  updatedFields?: String[]
}

export interface WindowSubscriptionPayload
  extends Promise<WindowSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>
  node: <T = Window>() => T
  updatedFields: () => Promise<String[]>
  previousValues: <T = WindowPreviousValues>() => T
}

export interface WindowSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WindowSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>
  node: <T = WindowSubscription>() => T
  updatedFields: () => Promise<AsyncIterator<String[]>>
  previousValues: <T = WindowPreviousValuesSubscription>() => T
}

export interface HouseEdgeNode {
  cursor: String
}

export interface HouseEdge extends Promise<HouseEdgeNode>, Fragmentable {
  node: <T = House>() => T
  cursor: () => Promise<String>
}

export interface HouseEdgeSubscription
  extends Promise<AsyncIterator<HouseEdgeNode>>,
    Fragmentable {
  node: <T = HouseSubscription>() => T
  cursor: () => Promise<AsyncIterator<String>>
}

export type Long = string

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: 'https://eu1.prisma.sh/lol/house/dev',
})
export const prisma = new Prisma()
